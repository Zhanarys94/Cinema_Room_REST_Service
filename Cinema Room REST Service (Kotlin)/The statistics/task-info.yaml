type: edu
files:
- name: src/cinema/Application.kt
  visible: true
  text: |-
    package cinema

    import org.springframework.boot.autoconfigure.SpringBootApplication
    import org.springframework.boot.runApplication
    import org.springframework.context.annotation.Configuration
    import org.springframework.web.bind.annotation.GetMapping
    import org.springframework.web.bind.annotation.RestController

    @SpringBootApplication
    open class Application

    fun main(args: Array<String>) {
        runApplication<Application>(*args)
    }

    @RestController
    class CinemaRoomController {
        class Seat(val row: Int, val column: Int)
        class CinemaRoom {
            val total_rows = 9
            val total_columns = 9
            val available_seats = List(total_rows) { row ->
                List(total_columns) { column ->
                    Seat(row + 1, column + 1)
                }
            }
        }

        private val cinema = CinemaRoom()

        @GetMapping("/seats")
        fun info(): CinemaRoom {
            return cinema
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {

        repositories {
            mavenCentral()
            maven { url 'https://packages.jetbrains.team/maven/p/academy/hyperskill-hspc' }
            maven { url 'https://jitpack.io' }
        }
        dependencies {
            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$hs.kotlin.version"
            classpath "org.springframework.boot:spring-boot-gradle-plugin:2.7.3"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
            classpath "org.jetbrains.kotlin:kotlin-allopen:$hs.kotlin.version"
            classpath "org.jetbrains.kotlin:kotlin-noarg:$hs.kotlin.version"
        }
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "kotlin-spring"
    apply plugin: "kotlin-jpa"

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    mainClassName = 'ApplicationKt'

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
        implementation 'org.jetbrains.kotlin:kotlin-reflect'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |
    import cinema.ApplicationKt;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(ApplicationKt.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                        resp.getRequest().getMethod() + " " +
                                resp.getRequest().getLocalUri() +
                                " should respond with status code " + status + ", " +
                                "responded: " + resp.getStatusCode() + "\n\n" +
                                "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("available_seats",
                                    isArray(
                                            81,
                                            isObject()
                                                    .value("row", isInteger(i -> i >= 1 && i <= 9))
                                                    .value("column", isInteger(i -> i >= 1 && i <= 9))
                                                    .value("price", isInteger(price -> price == 10 || price == 8))
                                    )
                            )
                            .value("total_columns", 9)
                            .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "1",
                            "column", "1"
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("token", isString())
                                    .value("ticket",
                                            isObject()
                                                    .value("row", 1)
                                                    .value("column", 1)
                                                    .value("price", 10)
                                    )
                    );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "1",
                            "column", "1"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                                    .anyOtherValues()
                    );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "10",
                            "column", "1"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                    .anyOtherValues()
                    );

            response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "1",
                            "column", "10"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                    .anyOtherValues()
                    );

            response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "-1",
                            "column", "-1"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                    .anyOtherValues()
                    );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 2,
                            "column", 5
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("token", isString())
                                    .value("ticket",
                                            isObject()
                                                    .value("row", 2)
                                                    .value("column", 5)
                                                    .value("price", 10)
                                    )
                    );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", wrongToken
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                            .anyOtherValues()
            );

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("returned_ticket",
                                    isObject()
                                            .value("row", 2)
                                            .value("column", 5)
                                            .value("price", 10)
                            )
            );

            return CheckResult.correct();
        }

        CheckResult testTokenInvalidation() {

            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 3,
                            "column", 6
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("token", isString())
                            .value("ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
            String tokenFromResponse = jsonResponse.get("token").getAsString();

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("returned_ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                            .anyOtherValues()
            );

            return CheckResult.correct();
        }

        CheckResult testReturnedTicketAvailability() {

            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 3,
                            "column", 6
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("token", isString())
                            .value("ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
            String tokenFromResponse = jsonResponse.get("token").getAsString();

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("returned_ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 3,
                            "column", 6
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("token", isString())
                            .value("ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = get("/stats").addParams(Map.of()).send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", WRONG_PASSWORD_MESSAGE)
                            .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = get("/stats").addParams(requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                            .value("current_income", currentIncome)
                            .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", token
                    ))
            ).send();

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("returned_ticket",
                                    isObject()
                                            .value("row", 7)
                                            .value("column", 4)
                                            .value("price", 8)
                            )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "7",
                            "column", "4"
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("token", isString())
                            .value("ticket",
                                    isObject()
                                            .value("row", 7)
                                            .value("column", 4)
                                            .value("price", 8)
                            )
            );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
                this::testEndpoint,
                this::testEndpointAvailableSeats,
                this::testPurchaseTicket,
                this::testErrorMessageThatTicketHasBeenPurchased,
                this::testErrorMessageThatNumbersOutOfBounds,
                this::testReturnTicket,
                this::testStatsEndpoint,
                () -> testStats(1, 10, 80),
                this::testPurchaseAnotherTicket,
                () -> testStats(2, 18, 79),
                this::returnTicket,
                () -> testStats(1, 10, 80),
                this::testTokenInvalidation,
                this::testReturnedTicketAvailability
        };
    }
  learner_created: false
- name: src/cinema/model/Seat.kt
  visible: true
  text: |-
    package cinema.model

    data class Seat(val row: Int, val column: Int, val price: Int)
  learner_created: true
- name: src/cinema/model/Requests.kt
  visible: true
  text: |-
    package cinema.model

    data class SeatRequest(val row: Int, val column: Int)

    data class TokenRequest(val token: String)
  learner_created: true
- name: src/cinema/model/Token.kt
  visible: true
  text: |-
    package cinema.model

    import java.util.*

    class Token(val token: UUID = UUID.randomUUID())
  learner_created: true
- name: src/cinema/exceptions/Exceptions.kt
  visible: true
  text: "package cinema.exceptions\n\nimport org.springframework.http.HttpStatus\n\
    import org.springframework.http.ResponseEntity\nimport org.springframework.web.bind.annotation.ControllerAdvice\n\
    import org.springframework.web.bind.annotation.ExceptionHandler\n\nclass CustomErrorMessage(val\
    \ error: String)\n\n@ControllerAdvice\nclass ControllerExceptionHandler {\n  \
    \  @ExceptionHandler(NotAvailableException::class)\n    fun handleNotAvailable(e:\
    \ NotAvailableException): ResponseEntity<CustomErrorMessage> {\n        val body\
    \ = CustomErrorMessage(e.error)\n        return ResponseEntity(body, HttpStatus.BAD_REQUEST)\n\
    \    }\n\n    @ExceptionHandler(OutOfBoundsException::class)\n    fun handleOutOfBounds(e:\
    \ OutOfBoundsException): ResponseEntity<CustomErrorMessage> {\n        val body\
    \ = CustomErrorMessage(e.error)\n        return ResponseEntity(body, HttpStatus.BAD_REQUEST)\n\
    \    }\n\n    @ExceptionHandler(WrongTokenException::class)\n    fun handleWrongToken(e:\
    \ WrongTokenException) : ResponseEntity<CustomErrorMessage> {\n        val body\
    \ = CustomErrorMessage(e.error)\n        return ResponseEntity(body, HttpStatus.BAD_REQUEST)\n\
    \    }\n    \n    @ExceptionHandler()\n}\n\nclass OutOfBoundsException(val error:\
    \ String) : RuntimeException(error)\n\nclass NotAvailableException(val error:\
    \ String) : RuntimeException(error)\n\nclass WrongTokenException(val error: String)\
    \ : RuntimeException(error)\n"
  learner_created: true
- name: src/cinema/model/Responses.kt
  visible: true
  text: |-
    package cinema.model

    data class PurchaseResponse(val token: String, val ticket: Seat)

    data class ReturnResponse(val returned_ticket: Seat)
  learner_created: true
- name: src/cinema/controller/Controller.kt
  visible: true
  text: "package cinema.controller\n\nimport cinema.exceptions.*\nimport cinema.model.*\n\
    import cinema.model.PurchaseResponse\nimport cinema.model.ReturnResponse\nimport\
    \ org.springframework.web.bind.annotation.*\nimport org.springframework.http.*\n\
    import java.util.concurrent.ConcurrentHashMap\n\n\n@RestController\nclass CinemaController(private\
    \ val cinema: CinemaRoom) {\n\n    private val tokensMap = ConcurrentHashMap<String,\
    \ Seat>()\n\n    @GetMapping(\"/seats\")\n    fun info(): CinemaRoom {\n     \
    \   return cinema\n    }\n\n    @PostMapping(\"/purchase\")\n    fun purchase(@RequestBody\
    \ seatRequest: SeatRequest): PurchaseResponse {\n        if (cinema.isOutOfBounds(seatRequest))\
    \ {\n            throw OutOfBoundsException(\"The number of a row or a column\
    \ is out of bounds!\")\n        } else if (!cinema.isAvailable(seatRequest)) {\n\
    \            throw NotAvailableException(\"The ticket has been already purchased!\"\
    )\n        }\n        val seat = cinema.occupySeat(seatRequest)\n        val token\
    \ = Token().token.toString()\n        tokensMap[token] = seat\n        return\
    \ PurchaseResponse(token, seat)\n    }\n\n    @PostMapping(\"/return\")\n    fun\
    \ returnTicket(@RequestBody tokenRequest: TokenRequest): ReturnResponse {\n  \
    \      if (!tokensMap.containsKey(tokenRequest.token)) throw WrongTokenException(\"\
    Wrong token!\")\n        val returnedSeat = tokensMap[tokenRequest.token]!!.also\
    \ {\n            cinema.addToAvailable(it)\n            tokensMap.remove(tokenRequest.token)\n\
    \        }\n        return ReturnResponse(returnedSeat)\n    }\n\n    @GetMapping(\"\
    /stats\")\n    fun statistics(@RequestParam password: String?): Statistics {\n\
    \        val super_secret = \"Zhan888\"\n        if (password!!.isEmpty()) {\n\
    \            \n        }\n    }\n\n    @PostMapping(\"/stats\", consumes = [MediaType.APPLICATION_FORM_URLENCODED_VALUE])\n\
    \    fun getStatsForm(password: Password?) {\n\n    }\n}"
  learner_created: true
- name: src/cinema/model/CinemaRoom.kt
  visible: true
  text: |-
    package cinema.model

    import com.fasterxml.jackson.annotation.JsonIgnore
    import org.springframework.stereotype.Component

    @Component
    class CinemaRoom {
        val total_rows = 9
        val total_columns = 9
        @JsonIgnore
        val indexMapOfSeats = LinkedHashMap<Seat, Int> ()
        val available_seats = mutableListOf<Seat>().apply {
            var index = 0
            for (row in 1..total_rows) {
                for (col in 1..total_columns) {
                    val price = if (row <= 4) 10 else 8
                    val seat = Seat(row, col, price)
                    indexMapOfSeats[seat] = index
                    add(seat)
                    index++
                }
            }
        }

        fun isAvailable(seatRequest: SeatRequest): Boolean = available_seats
            .find { it.row == seatRequest.row && it.column == seatRequest.column } != null

        fun isOutOfBounds(seatRequest: SeatRequest): Boolean {
            return seatRequest.row < 1 || seatRequest.row > 9 || seatRequest.column < 1 || seatRequest.column > 9
        }

        fun occupySeat(seatRequest: SeatRequest): Seat {
            val seat = available_seats.find { it.row == seatRequest.row && it.column == seatRequest.column }!!
            available_seats.remove(seat)
            return seat
        }

        fun addToAvailable(seat: Seat) {
            val index = indexMapOfSeats[seat]!!
            available_seats.add(index, seat)
        }
    }
  learner_created: true
- name: src/cinema/model/Statistics.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/20460#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Thu, 29 Jun 2023 13:56:28 UTC"
record: -1
